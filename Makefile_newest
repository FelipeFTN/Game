# Library Raylib extract to lib/raylib/
# By default we suppose we are working on Windows
RAYLIB_PATH  ?= lib/raylib/raylib-4.5.0_linux_amd64
RAYLIB_FILES ?= lib/raylib/include lib/raylib/lib

# Get operating system
UNAME := $(shell uname)

# Determine which operating system is being used
# and set property variables for each case
ifeq ($(UNAME), Linux)
	RAYLIB_PATH = lib/raylib/raylib-4.5.0_linux_amd64
	PACKAGE_TYPE = tar.gz
	EXTRACTOR = tar -xzvf
	export PATH := $(LD_LIBRARY_PATH);$(PATH)
else ifeq ($(UNAME), Windows_NT)
	RAYLIB_PATH = lib/raylib/raylib-4.5.0_win64_mingw-w64
	PACKAGE_TYPE = zip
	EXTRACTOR = unzip -q
else ifeq ($(UNAME), Darwin)
	RAYLIB_PATH = lib/raylib/raylib-4.5.0_macos
	PACKAGE_TYPE = tar.gz
	EXTRACTOR = tar -xzvf
endif

# Variable LD_LIBRARY_PATH to PATH
# This variable is necessary for raylib to work property
LD_LIBRARY_PATH := /usr/local/lib

# Compiler
CC = g++

# Directories
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin
LIB_DIR = lib

# Files
SRC_FILES = $(wildcard $(SRC_DIR)/*.cpp $(SRC_DIR)/*/*.cpp)
OBJ_FILES = $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SRC_FILES))

# Compiler flags
CXXFLAGS = -I$(LIB_DIR)/raylib/include -L$(LIB_DIR)/raylib/lib -lraylib -lm -lpthread -ldl -lrt

# Target binary
TARGET = $(BIN_DIR)/Game

# Default rule
all: library $(TARGET)

# Rule for creating object files directory
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	mkdir -p $(@D)
	$(CC) -c -o $@ $< $(CXXFLAGS)

# Rule for linking object files to create the binary
$(TARGET): $(OBJ_FILES)
	mkdir -p $(@D)
	$(CC) -o $@ $^ $(CXXFLAGS)

# Handle library extract all library files into lib/raylib/
library:
	$(EXTRACTOR) $(RAYLIB_PATH).$(PACKAGE_TYPE) -C lib/raylib/
	mkdir --parents --verbose lib/raylib/include
	mkdir --parents --verbose lib/raylib/lib
	mv $(RAYLIB_PATH)/include/* lib/raylib/include
	mv $(RAYLIB_PATH)/lib/* lib/raylib/lib
	rm --recursive --force $(RAYLIB_PATH)

# Rule for cleaning up
clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)

# PHONY targets
.PHONY: all clean
