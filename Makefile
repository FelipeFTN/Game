#
# It should cover all operating systems:
#  - GNU/Linux
#  - Windows
#  - OSX (Apple OS)
#
#---------------------------------------------------------------------------------------------------
#   This software is provided "as-is", without any express or implied warranty. In no event
#   will the authors be held liable for any damages arising from the use of this software.
#
#   Permission is granted to anyone to use this software for any purpose, including commercial
#   applications, and to alter it and redistribute it freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not claim that you
#     wrote the original software. If you use this software in a product, an acknowledgment
#     in the product documentation would be appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be misrepresented
#     as being the original software.
#
#     3. This notice may not be removed or altered from any source distribution.
#
#**************************************************************************************************

# PHONY targets
.PHONY: all clean library install

# CXX compiler
CC = g++

# Library Raylib extract to lib/raylib/
# By default we suppose we are working on Windows
RAYLIB_PATH  ?= lib/raylib/raylib-4.5.0_linux_amd64
RAYLIB_FILES ?= lib/raylib/include lib/raylib/lib

# Get operating system
UNAME := $(shell uname)

# Determine which operating system is being used
# and set property variables for each case
ifeq ($(UNAME), Linux)
	RAYLIB_PATH = lib/raylib/raylib-4.5.0_linux_amd64
	PACKAGE_TYPE = tar.gz
	EXTRACTOR = tar -xzvf
	export PATH := $(LD_LIBRARY_PATH);$(PATH)
else ifeq ($(UNAME), Windows_NT)
	RAYLIB_PATH = lib/raylib/raylib-4.5.0_win64_mingw-w64
	PACKAGE_TYPE = zip
	EXTRACTOR = unzip -q
else ifeq ($(UNAME), Darwin)
	RAYLIB_PATH = lib/raylib/raylib-4.5.0_macos
	PACKAGE_TYPE = tar.gz
	EXTRACTOR = tar -xzvf
endif

# Variable LD_LIBRARY_PATH to PATH
# This variable is necessary for raylib to work property
LD_LIBRARY_PATH := /usr/local/lib

# Binary file location
BINARY = bin/Game

# CXXFLAGS for compiling all the cpp files
# These flags are mostly for Raylib library, which is being used as our Game Framework
CXXFLAGS = -L./lib/raylib/lib -I./lib/raylib/include -lraylib -lm -lpthread -ldl -lrt
CXXFILES = src/main.cpp src/ball/ball.cpp src/ball/setter.cpp src/ball/getter.cpp src/map/map.cpp

# Objects files generated by .cpp files from compiler
OBJECTS = src/main.o src/ball/ball.o src/ball/setter.o src/ball/getter.o src/map/map.o

# Get user root
ROOT = $(shell whoami)

# Default target: build library and game
all: library $(BINARY)

# Game compiler
$(BINARY): $(OBJECTS)
	mkdir -p bin/
	$(CC) $^ -o $@ $(CXXFLAGS)

%.o: %.cpp
	$(CC) -c $< -o $@ $(CXXFLAGS)

# Handle library extract all library files into lib/raylib/
library:
	$(EXTRACTOR) $(RAYLIB_PATH).$(PACKAGE_TYPE) -C lib/raylib/
	mkdir --parents --verbose lib/raylib/include
	mkdir --parents --verbose lib/raylib/lib
	mv $(RAYLIB_PATH)/include/* lib/raylib/include
	mv $(RAYLIB_PATH)/lib/* lib/raylib/lib
	rm --recursive --force $(RAYLIB_PATH)

# Install library and maybe, futurally the whole Game
install:
ifeq ($(ROOT), root)
ifeq ($(UNAME), Linux)
	mkdir --parents --verbose /usr/local/lib
	mkdir --parents --verbose /usr/local/include
	cp --update --verbose ./lib/raylib/include/* /usr/local/include/
	cp --update --verbose ./lib/raylib/lib/* /usr/local/lib/
	@echo "dependencies installed!"
	@echo "In order to apply the library, please, update your path:"
	@echo "export LD_LIBRARY_PATH=./lib/raylib/lib:""$$""LD_LIBRARY_PATH"
else
	@echo "This function currently works on GNU/Linux systems."
endif
else
	@echo "Error: Root permissions needed for installation. Try sudo make install"
endif

# Clear all useless builded files
clean:
	rm --recursive --force $(RAYLIB_FILES)
	rm --recursive --force bin/
	rm $(OBJECTS)
